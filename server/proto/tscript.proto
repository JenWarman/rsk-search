syntax = "proto3";

package rsk;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/warmans/rsk-search/server/gen/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "http://scrimpton.com";
    description: "Search Xfm transcriptions";
  }
  schemes: HTTP;
};
service TscriptService {

  rpc ListTscripts(ListTscriptsRequest) returns (TscriptList) {
    option (google.api.http) = {
      get: "/api/tscript"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "listTscripts",
      summary: "List incomplete transcriptions"
      tags: "search"
    };
  }

  rpc GetTscriptTimeline(GetTscriptTimelineRequest) returns (TscriptTimeline) {
    option (google.api.http) = {
      get: "/api/tscript/{tscript_id}/timeline"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "getTscriptTimeline",
      summary: "Gets a specific transcript chunk to be completed."
      tags: "search"
    };
  }

  rpc ListContributions(ListContributionsRequest) returns (ContributionList) {
    option (google.api.http) = {
      get: "/api/tscript/contrib"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "listContributions",
      summary: "lists contributions"
      tags: "search"
    };
  }

  // chunks are ~3 min sections of the transcription
  rpc GetChunkStats(google.protobuf.Empty) returns (ChunkStats) {
    option (google.api.http) = {
      get: "/api/tscript/stats"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "getChunkStats",
      summary: "Get details about the current chunk backlog"
      tags: "search"
    };
  }

  rpc GetAuthorLeaderboard(google.protobuf.Empty) returns (AuthorLeaderboard) {
    option (google.api.http) = {
      get: "/api/tscript/author/leaderboard"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "getAuthorLeaderboard",
      summary: "lists any existing contributions for a chunk"
      tags: "search"
    };
  }

  rpc GetChunk(GetChunkRequest) returns (Chunk) {
    option (google.api.http) = {
      get: "/api/tscript/chunk/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "getChunk",
      summary: "Gets a specific transcript chunk to be completed."
      tags: "search"
    };
  }

  rpc CreateChunkContribution(CreateChunkContributionRequest) returns (ChunkContribution) {
    option (google.api.http) = {
      patch: "/api/tscript/chunk/{chunk_id}/contrib",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "createChunkContribution",
      summary: "Submit a transcript new chunk that has been completed."
      tags: "search"
    };
  }

  rpc GetContribution(GetContributionRequest) returns (ChunkContribution) {
    option (google.api.http) = {
      get: "/api/tscript/contrib/{contribution_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "getContribution",
      summary: "lists any existing contributions for a chunk"
      tags: "search"
    };
  }

  rpc UpdateContribution(UpdateContributionRequest) returns (ChunkContribution) {
    option (google.api.http) = {
      patch: "/api/tscript/contrib/{contribution_id}",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "updateContribution",
      summary: "Update one of your existing contributions."
      tags: "search"
    };
  }

  rpc DeleteContribution(DeleteContributionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/tscript/contrib/{contribution_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "deleteContribution",
      summary: "Discard unapproved contribution."
      tags: "search"
    };
  }

  // todo: remove chunk_id from path - RequestContributionState
  rpc RequestContributionState(RequestContributionStateRequest) returns (ChunkContribution) {
    option (google.api.http) = {
      patch: "/api/tscript/contrib/{contribution_id}/state",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "requestContributionState",
      summary: "request the contribution state be changed."
      tags: "search"
    };
  }

  // Rewards

  rpc ListPendingRewards(google.protobuf.Empty) returns (PendingRewardList){
    option (google.api.http) = {
      get: "/api/rewards"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "listPendingRewards",
      summary: "Lists arewards that the logged in user is able to claim."
      tags: "search"
    };
  }

  rpc ListClaimedRewards(google.protobuf.Empty) returns (ClaimedRewardList){
    option (google.api.http) = {
      get: "/api/rewards/claimed"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "listClaimedRewards",
      summary: "Lists rewards that have been claimed."
      tags: "search"
    };
  }

  rpc ClaimReward(ClaimRewardRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      patch: "/api/rewards/{id}/claim",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "claimReward",
      summary: "Claims a reward."
      tags: "search"
    };
  }

  rpc ListDonationRecipients(ListDonationRecipientsRequest) returns (DonationRecipientList){
    option (google.api.http) = {
      get: "/api/rewards/{reward_id}/recipients"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "listDonationRecipients",
      summary: "Lists available recipients for reward."
      tags: "search"
    };
  }
}

message Tscript {
  string id = 1;
  string publication = 2;
  int32 series = 3;
  int32 episode = 4;
}

message Author {
  string id = 1;
  string name = 2;
}

message ChunkStats {
  int32 num_pending = 1;
  int32 num_submitted = 2;
  string suggested_next_chunk_id = 3;
}

message GetChunkRequest {
  string id = 1;
}

message Chunk {
  string id = 1;
  string tscript_id = 2;
  string raw = 3;
  string audio_clip_uri = 4;
  int32 num_contributions = 5;
}

message CreateChunkContributionRequest {
  string chunk_id = 1;
  string transcript = 2;
}

enum ContributionState {
  STATE_UNDEFINED = 0;
  STATE_REQUEST_APPROVAL = 1;
  STATE_PENDING = 2;
  STATE_APPROVED = 3;
  STATE_REJECTED = 4;
}

message ChunkContribution {
  reserved 4;

  string id = 1;
  string chunk_id = 2;
  string transcript = 3;
  ContributionState state = 5;
  Author author = 6;
}

message ShortChunkContribution {
  string id = 1;
  string chunk_id = 2;
  string author_id = 4;
  ContributionState state = 5;
}

message ChunkContributionList {
  repeated ShortChunkContribution contributions = 1;
}

message SubmitDialogCorrectionRequest {
  string episode_id = 1;
  string id = 2;
  string correction = 3;
}


message UpdateContributionRequest {
  string contribution_id = 1;
  string transcript = 2;
  ContributionState state = 3;
}

message DeleteContributionRequest{
  string contribution_id = 1;
}

message RequestContributionStateRequest {
  string contribution_id = 1;
  ContributionState request_state = 2;
  string comment = 3;
}

message GetContributionRequest{
  string contribution_id = 1;
}

message ListTscriptChunkContributionsRequest {
  int32 page = 2;
}

message ListTscriptsRequest {
}

message TscriptList {
  repeated TscriptStats tscripts = 1;
}

message TscriptStats {
  string id = 1;
  string publication = 2;
  int32 series = 3;
  int32 episode = 4;
  map<string, ChunkStates> chunk_contributions = 5;
  int32 num_chunks = 6;
  int32 num_contributions = 7;
  int32 num_pending_contributions = 8;
  int32 num_request_approval_contributions = 9;
  int32 num_approved_contributions = 10;
  int32 num_rejected_contributions = 11;
}

message ChunkStates {
  repeated ContributionState states = 1;
}

message AuthorLeaderboard {
  repeated AuthorRanking authors = 1;
}

message AuthorRanking {
  Author author = 1;
  bool approver = 2;
  int32 accepted_contributions = 3;
  float award_value = 4;
}

message GetTscriptTimelineRequest {
  string tscript_id = 1;
  int32 page = 2;
}

message TscriptTimeline {
  repeated TscriptTimelineEvent events = 1;
}

message TscriptTimelineEvent {
  string who = 1;
  string what = 2;
  string when = 3;
}

message PendingRewardList {
  repeated Reward rewards = 1;
}

message Reward {

  enum RewardKind {
    UNKNOWN = 0;
    DONATION = 1;
  }

  string id = 1;
  RewardKind kind = 2;
  string name = 3;
  string criteria = 4;
  float value = 5;
  string value_currency = 6;
}

message ClaimRewardRequest {
  string id = 1;
  oneof args {
    DonationArgs donation_args = 2;
  }
}

message DonationArgs {
  string recipient = 1;
}

message ListDonationRecipientsRequest {
  string reward_id = 1;
}

message DonationRecipientList {
  repeated DonationRecipient organizations = 1;
}

message DonationRecipient {
  string id = 1;
  string name = 2;
  string mission = 3;
  string logo_url = 4;
  string ngo_id = 5;
  string url = 6;
  string quote = 7;
}

message ClaimedRewardList{
  repeated ClaimedReward rewards = 1;
}

message ClaimedReward {
  string id = 1;
  string claim_kind = 2;
  float claim_value = 3;
  string claim_currency = 4;
  string claim_description = 5;
  string claim_at = 6;
}

message ListContributionsRequest {
  string filter = 1;
  string sort_field = 2;
  string sort_direction = 3;
  int32 page = 4;
  int32 page_size = 5;
}

message ContributionList {
  repeated Contribution contributions = 1;
}

message Contribution {
  string id = 1;
  string tscript_id = 2;
  string chunk_id = 3;
  string transcript = 4;
  ContributionState state = 5;
  Author author = 6;
  string created_at = 7;
}
