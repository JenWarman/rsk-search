syntax = "proto3";

package rsk;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";


option go_package = "github.com/warmans/rsk-search/server/gen/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "http://scrimpton.com";
    description: "Search Xfm transcriptions";
  }
  schemes: HTTP;
};
service SearchService {

  // search

  rpc Search(SearchRequest) returns (SearchResultList) {
    option (google.api.http) = {
      get: "/api/search"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "search",
      summary: "Perform a search"
      tags: "search"
    };
  }

  rpc GetSearchMetadata(google.protobuf.Empty) returns (SearchMetadata) {
    option (google.api.http) = {
      get: "/api/metadata"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "getSearchMetadata",
      summary: "Fetch search metadata e.g. searchable fields"
      tags: "search"
    };
  }

  rpc ListFieldValues(ListFieldValuesRequest) returns (FieldValueList) {
    option (google.api.http) = {
      get: "/api/values/{field}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "listFieldValues",
      summary: "Get a list of values for the given keyword field"
      tags: "search"
    };
  }

  // episodes

  rpc GetTranscript(GetTranscriptRequest) returns (Transcript) {
    option (google.api.http) = {
      get: "/api/transcript/{epid}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "getTranscript",
      summary: "Fetch a transcript and associated metadata."
      tags: "search"
    };
  }

  rpc ListTranscripts(ListTranscriptsRequest) returns (TranscriptList) {
    option (google.api.http) = {
      get: "/api/transcript"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "listTranscripts",
      summary: "Fetch list of available episodes"
      tags: "search"
    };
  }
}

message SearchRequest {
  string query = 1;
  int32 page = 2;
}

message SearchResultList {
  repeated SearchResult results = 1;
  int32 result_count = 2;
  map<string, SearchStats> stats = 3;
}

message SearchResult {
  ShortTranscript episode = 1;
  repeated DialogResult dialogs = 2;
}

message SearchStats  {
  repeated string labels = 2;
  repeated float values = 3;
}

message ShortTranscript {
  string id = 1;
  string publication = 2;
  int32 series = 3;
  int32 episode = 4;
  bool transcript_available = 5;
  bool incomplete = 6;
  string release_date = 7;
  string summary = 8;
  repeated string synopsis = 9;
}

message DialogResult {
  repeated Dialog lines = 1;
  float score = 2;
}

message Dialog {
  reserved 7; // content_tags

  string id = 1;
  int64 pos = 2;
  string type = 3;
  string actor = 4;
  string content = 5;
  map<string, string> metadata = 6;
  bool is_matched_row = 8;
  bool notable = 9;
  int64 offset_sec = 10;
  bool offset_inferred = 11;
}

message Synopsis {
  string description = 1;
  int64 start_pos = 2;
  int64 end_pos = 3;
}

message Trivia {
  string description = 1;
  int64 start_pos = 2;
  int64 end_pos = 3;
}

message Tag {
  string name = 1;
  repeated string kind = 2;
}

message Transcript {
  reserved 6; // tags

  string id = 1;
  string publication = 2;
  int32 series = 3;
  int32 episode = 4;
  map<string, string> metadata = 5;
  repeated Dialog transcript = 7;
  string release_date = 8;
  repeated Synopsis synopses = 9;
  repeated string contributors = 10;
  bool incomplete = 11;
  string raw_transcript = 12;
  string audio_uri = 13;
  string short_id = 14;
  repeated Trivia trivia = 15;
}

message GetTranscriptRequest {
  string epid = 1;
  bool with_raw = 2;
}

message ListTranscriptsRequest {
}

message TranscriptList {
  repeated ShortTranscript episodes = 1;
}

message SearchMetadata {
  repeated FieldMeta fields = 1;
}

message FieldMeta {

  enum Kind {
    UNKNOWN = 0;
    IDENTIFIER = 1;
    KEYWORD = 2;
    KEYWORD_LIST = 3;
    TEXT = 4;
    INT = 5;
    FLOAT = 6;
    DATE = 7;
  }

  string name = 1;
  Kind kind = 2;
}

message ListFieldValuesRequest {
  string field = 1;
  string prefix = 2;
}

message FieldValueList {
  repeated FieldValue values = 1;
}

message FieldValue {
  string value = 1;
  int32 count = 2;
}
