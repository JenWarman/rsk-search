// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TscriptServiceClient is the client API for TscriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TscriptServiceClient interface {
	ListTscripts(ctx context.Context, in *ListTscriptsRequest, opts ...grpc.CallOption) (*TscriptList, error)
	GetTscriptTimeline(ctx context.Context, in *GetTscriptTimelineRequest, opts ...grpc.CallOption) (*TscriptTimeline, error)
	ListContributions(ctx context.Context, in *ListContributionsRequest, opts ...grpc.CallOption) (*ContributionList, error)
	// chunks are ~3 min sections of the transcription
	GetChunkStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChunkStats, error)
	GetAuthorLeaderboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthorLeaderboard, error)
	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*Chunk, error)
	GetChunkContribution(ctx context.Context, in *GetChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	CreateChunkContribution(ctx context.Context, in *CreateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	// todo: remove chunk_id from path - make it UpdateContribution
	UpdateChunkContribution(ctx context.Context, in *UpdateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	// todo: remove chunk_id from path - DiscardContribution
	DiscardDraftContribution(ctx context.Context, in *DiscardDraftContributionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// todo: remove chunk_id from path - RequestContributionState
	RequestChunkContributionState(ctx context.Context, in *RequestChunkContributionStateRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	ListPendingRewards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PendingRewardList, error)
	ListClaimedRewards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClaimedRewardList, error)
	ClaimReward(ctx context.Context, in *ClaimRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDonationRecipients(ctx context.Context, in *ListDonationRecipientsRequest, opts ...grpc.CallOption) (*DonationRecipientList, error)
}

type tscriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTscriptServiceClient(cc grpc.ClientConnInterface) TscriptServiceClient {
	return &tscriptServiceClient{cc}
}

func (c *tscriptServiceClient) ListTscripts(ctx context.Context, in *ListTscriptsRequest, opts ...grpc.CallOption) (*TscriptList, error) {
	out := new(TscriptList)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/ListTscripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) GetTscriptTimeline(ctx context.Context, in *GetTscriptTimelineRequest, opts ...grpc.CallOption) (*TscriptTimeline, error) {
	out := new(TscriptTimeline)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/GetTscriptTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) ListContributions(ctx context.Context, in *ListContributionsRequest, opts ...grpc.CallOption) (*ContributionList, error) {
	out := new(ContributionList)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/ListContributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) GetChunkStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChunkStats, error) {
	out := new(ChunkStats)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/GetChunkStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) GetAuthorLeaderboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthorLeaderboard, error) {
	out := new(AuthorLeaderboard)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/GetAuthorLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) GetChunkContribution(ctx context.Context, in *GetChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/GetChunkContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) CreateChunkContribution(ctx context.Context, in *CreateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/CreateChunkContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) UpdateChunkContribution(ctx context.Context, in *UpdateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/UpdateChunkContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) DiscardDraftContribution(ctx context.Context, in *DiscardDraftContributionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/DiscardDraftContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) RequestChunkContributionState(ctx context.Context, in *RequestChunkContributionStateRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/RequestChunkContributionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) ListPendingRewards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PendingRewardList, error) {
	out := new(PendingRewardList)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/ListPendingRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) ListClaimedRewards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClaimedRewardList, error) {
	out := new(ClaimedRewardList)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/ListClaimedRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) ClaimReward(ctx context.Context, in *ClaimRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/ClaimReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tscriptServiceClient) ListDonationRecipients(ctx context.Context, in *ListDonationRecipientsRequest, opts ...grpc.CallOption) (*DonationRecipientList, error) {
	out := new(DonationRecipientList)
	err := c.cc.Invoke(ctx, "/rsk.TscriptService/ListDonationRecipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TscriptServiceServer is the server API for TscriptService service.
// All implementations should embed UnimplementedTscriptServiceServer
// for forward compatibility
type TscriptServiceServer interface {
	ListTscripts(context.Context, *ListTscriptsRequest) (*TscriptList, error)
	GetTscriptTimeline(context.Context, *GetTscriptTimelineRequest) (*TscriptTimeline, error)
	ListContributions(context.Context, *ListContributionsRequest) (*ContributionList, error)
	// chunks are ~3 min sections of the transcription
	GetChunkStats(context.Context, *emptypb.Empty) (*ChunkStats, error)
	GetAuthorLeaderboard(context.Context, *emptypb.Empty) (*AuthorLeaderboard, error)
	GetChunk(context.Context, *GetChunkRequest) (*Chunk, error)
	GetChunkContribution(context.Context, *GetChunkContributionRequest) (*ChunkContribution, error)
	CreateChunkContribution(context.Context, *CreateChunkContributionRequest) (*ChunkContribution, error)
	// todo: remove chunk_id from path - make it UpdateContribution
	UpdateChunkContribution(context.Context, *UpdateChunkContributionRequest) (*ChunkContribution, error)
	// todo: remove chunk_id from path - DiscardContribution
	DiscardDraftContribution(context.Context, *DiscardDraftContributionRequest) (*emptypb.Empty, error)
	// todo: remove chunk_id from path - RequestContributionState
	RequestChunkContributionState(context.Context, *RequestChunkContributionStateRequest) (*ChunkContribution, error)
	ListPendingRewards(context.Context, *emptypb.Empty) (*PendingRewardList, error)
	ListClaimedRewards(context.Context, *emptypb.Empty) (*ClaimedRewardList, error)
	ClaimReward(context.Context, *ClaimRewardRequest) (*emptypb.Empty, error)
	ListDonationRecipients(context.Context, *ListDonationRecipientsRequest) (*DonationRecipientList, error)
}

// UnimplementedTscriptServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTscriptServiceServer struct {
}

func (UnimplementedTscriptServiceServer) ListTscripts(context.Context, *ListTscriptsRequest) (*TscriptList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTscripts not implemented")
}
func (UnimplementedTscriptServiceServer) GetTscriptTimeline(context.Context, *GetTscriptTimelineRequest) (*TscriptTimeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTscriptTimeline not implemented")
}
func (UnimplementedTscriptServiceServer) ListContributions(context.Context, *ListContributionsRequest) (*ContributionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContributions not implemented")
}
func (UnimplementedTscriptServiceServer) GetChunkStats(context.Context, *emptypb.Empty) (*ChunkStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkStats not implemented")
}
func (UnimplementedTscriptServiceServer) GetAuthorLeaderboard(context.Context, *emptypb.Empty) (*AuthorLeaderboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorLeaderboard not implemented")
}
func (UnimplementedTscriptServiceServer) GetChunk(context.Context, *GetChunkRequest) (*Chunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedTscriptServiceServer) GetChunkContribution(context.Context, *GetChunkContributionRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkContribution not implemented")
}
func (UnimplementedTscriptServiceServer) CreateChunkContribution(context.Context, *CreateChunkContributionRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChunkContribution not implemented")
}
func (UnimplementedTscriptServiceServer) UpdateChunkContribution(context.Context, *UpdateChunkContributionRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChunkContribution not implemented")
}
func (UnimplementedTscriptServiceServer) DiscardDraftContribution(context.Context, *DiscardDraftContributionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardDraftContribution not implemented")
}
func (UnimplementedTscriptServiceServer) RequestChunkContributionState(context.Context, *RequestChunkContributionStateRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChunkContributionState not implemented")
}
func (UnimplementedTscriptServiceServer) ListPendingRewards(context.Context, *emptypb.Empty) (*PendingRewardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingRewards not implemented")
}
func (UnimplementedTscriptServiceServer) ListClaimedRewards(context.Context, *emptypb.Empty) (*ClaimedRewardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClaimedRewards not implemented")
}
func (UnimplementedTscriptServiceServer) ClaimReward(context.Context, *ClaimRewardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimReward not implemented")
}
func (UnimplementedTscriptServiceServer) ListDonationRecipients(context.Context, *ListDonationRecipientsRequest) (*DonationRecipientList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDonationRecipients not implemented")
}

// UnsafeTscriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TscriptServiceServer will
// result in compilation errors.
type UnsafeTscriptServiceServer interface {
	mustEmbedUnimplementedTscriptServiceServer()
}

func RegisterTscriptServiceServer(s grpc.ServiceRegistrar, srv TscriptServiceServer) {
	s.RegisterService(&TscriptService_ServiceDesc, srv)
}

func _TscriptService_ListTscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).ListTscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/ListTscripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).ListTscripts(ctx, req.(*ListTscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_GetTscriptTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTscriptTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).GetTscriptTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/GetTscriptTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).GetTscriptTimeline(ctx, req.(*GetTscriptTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_ListContributions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContributionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).ListContributions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/ListContributions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).ListContributions(ctx, req.(*ListContributionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_GetChunkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).GetChunkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/GetChunkStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).GetChunkStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_GetAuthorLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).GetAuthorLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/GetAuthorLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).GetAuthorLeaderboard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).GetChunk(ctx, req.(*GetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_GetChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).GetChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/GetChunkContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).GetChunkContribution(ctx, req.(*GetChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_CreateChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).CreateChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/CreateChunkContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).CreateChunkContribution(ctx, req.(*CreateChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_UpdateChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).UpdateChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/UpdateChunkContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).UpdateChunkContribution(ctx, req.(*UpdateChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_DiscardDraftContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardDraftContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).DiscardDraftContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/DiscardDraftContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).DiscardDraftContribution(ctx, req.(*DiscardDraftContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_RequestChunkContributionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChunkContributionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).RequestChunkContributionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/RequestChunkContributionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).RequestChunkContributionState(ctx, req.(*RequestChunkContributionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_ListPendingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).ListPendingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/ListPendingRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).ListPendingRewards(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_ListClaimedRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).ListClaimedRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/ListClaimedRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).ListClaimedRewards(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_ClaimReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).ClaimReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/ClaimReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).ClaimReward(ctx, req.(*ClaimRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TscriptService_ListDonationRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDonationRecipientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TscriptServiceServer).ListDonationRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.TscriptService/ListDonationRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TscriptServiceServer).ListDonationRecipients(ctx, req.(*ListDonationRecipientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TscriptService_ServiceDesc is the grpc.ServiceDesc for TscriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TscriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rsk.TscriptService",
	HandlerType: (*TscriptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTscripts",
			Handler:    _TscriptService_ListTscripts_Handler,
		},
		{
			MethodName: "GetTscriptTimeline",
			Handler:    _TscriptService_GetTscriptTimeline_Handler,
		},
		{
			MethodName: "ListContributions",
			Handler:    _TscriptService_ListContributions_Handler,
		},
		{
			MethodName: "GetChunkStats",
			Handler:    _TscriptService_GetChunkStats_Handler,
		},
		{
			MethodName: "GetAuthorLeaderboard",
			Handler:    _TscriptService_GetAuthorLeaderboard_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _TscriptService_GetChunk_Handler,
		},
		{
			MethodName: "GetChunkContribution",
			Handler:    _TscriptService_GetChunkContribution_Handler,
		},
		{
			MethodName: "CreateChunkContribution",
			Handler:    _TscriptService_CreateChunkContribution_Handler,
		},
		{
			MethodName: "UpdateChunkContribution",
			Handler:    _TscriptService_UpdateChunkContribution_Handler,
		},
		{
			MethodName: "DiscardDraftContribution",
			Handler:    _TscriptService_DiscardDraftContribution_Handler,
		},
		{
			MethodName: "RequestChunkContributionState",
			Handler:    _TscriptService_RequestChunkContributionState_Handler,
		},
		{
			MethodName: "ListPendingRewards",
			Handler:    _TscriptService_ListPendingRewards_Handler,
		},
		{
			MethodName: "ListClaimedRewards",
			Handler:    _TscriptService_ListClaimedRewards_Handler,
		},
		{
			MethodName: "ClaimReward",
			Handler:    _TscriptService_ClaimReward_Handler,
		},
		{
			MethodName: "ListDonationRecipients",
			Handler:    _TscriptService_ListDonationRecipients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tscript.proto",
}
