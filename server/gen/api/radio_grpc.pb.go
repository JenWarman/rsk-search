// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: radio.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RadioService_GetState_FullMethodName = "/rsk.RadioService/GetState"
	RadioService_GetNext_FullMethodName  = "/rsk.RadioService/GetNext"
	RadioService_PutState_FullMethodName = "/rsk.RadioService/PutState"
)

// RadioServiceClient is the client API for RadioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RadioServiceClient interface {
	GetState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RadioState, error)
	GetNext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NextEpisode, error)
	PutState(ctx context.Context, in *PutStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type radioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRadioServiceClient(cc grpc.ClientConnInterface) RadioServiceClient {
	return &radioServiceClient{cc}
}

func (c *radioServiceClient) GetState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RadioState, error) {
	out := new(RadioState)
	err := c.cc.Invoke(ctx, RadioService_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioServiceClient) GetNext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NextEpisode, error) {
	out := new(NextEpisode)
	err := c.cc.Invoke(ctx, RadioService_GetNext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radioServiceClient) PutState(ctx context.Context, in *PutStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RadioService_PutState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RadioServiceServer is the server API for RadioService service.
// All implementations should embed UnimplementedRadioServiceServer
// for forward compatibility
type RadioServiceServer interface {
	GetState(context.Context, *emptypb.Empty) (*RadioState, error)
	GetNext(context.Context, *emptypb.Empty) (*NextEpisode, error)
	PutState(context.Context, *PutStateRequest) (*emptypb.Empty, error)
}

// UnimplementedRadioServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRadioServiceServer struct {
}

func (UnimplementedRadioServiceServer) GetState(context.Context, *emptypb.Empty) (*RadioState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedRadioServiceServer) GetNext(context.Context, *emptypb.Empty) (*NextEpisode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNext not implemented")
}
func (UnimplementedRadioServiceServer) PutState(context.Context, *PutStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutState not implemented")
}

// UnsafeRadioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RadioServiceServer will
// result in compilation errors.
type UnsafeRadioServiceServer interface {
	mustEmbedUnimplementedRadioServiceServer()
}

func RegisterRadioServiceServer(s grpc.ServiceRegistrar, srv RadioServiceServer) {
	s.RegisterService(&RadioService_ServiceDesc, srv)
}

func _RadioService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadioService_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServiceServer).GetState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadioService_GetNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServiceServer).GetNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadioService_GetNext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServiceServer).GetNext(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RadioService_PutState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadioServiceServer).PutState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RadioService_PutState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadioServiceServer).PutState(ctx, req.(*PutStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RadioService_ServiceDesc is the grpc.ServiceDesc for RadioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RadioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rsk.RadioService",
	HandlerType: (*RadioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _RadioService_GetState_Handler,
		},
		{
			MethodName: "GetNext",
			Handler:    _RadioService_GetNext_Handler,
		},
		{
			MethodName: "PutState",
			Handler:    _RadioService_PutState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "radio.proto",
}
