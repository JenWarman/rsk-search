// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContribServiceClient is the client API for ContribService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContribServiceClient interface {
	ListTscripts(ctx context.Context, in *ListTscriptsRequest, opts ...grpc.CallOption) (*TscriptList, error)
	// chunks are ~3 min sections of the transcription
	GetChunkStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChunkStats, error)
	GetAuthorLeaderboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthorLeaderboard, error)
	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*Chunk, error)
	ListChunks(ctx context.Context, in *ListChunksRequest, opts ...grpc.CallOption) (*ChunkList, error)
	ListChunkContributions(ctx context.Context, in *ListChunkContributionsRequest, opts ...grpc.CallOption) (*ChunkContributionList, error)
	GetChunkContribution(ctx context.Context, in *GetChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	CreateChunkContribution(ctx context.Context, in *CreateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	UpdateChunkContribution(ctx context.Context, in *UpdateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	DeleteChunkContribution(ctx context.Context, in *DeleteChunkContributionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequesChunktContributionState(ctx context.Context, in *RequestChunkContributionStateRequest, opts ...grpc.CallOption) (*ChunkContribution, error)
	ListPendingRewards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PendingRewardList, error)
	ListClaimedRewards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClaimedRewardList, error)
	ClaimReward(ctx context.Context, in *ClaimRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDonationRecipients(ctx context.Context, in *ListDonationRecipientsRequest, opts ...grpc.CallOption) (*DonationRecipientList, error)
	GetDonationStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DonationStats, error)
	ListTranscriptChanges(ctx context.Context, in *ListTranscriptChangesRequest, opts ...grpc.CallOption) (*TranscriptChangeList, error)
	GetTranscriptChange(ctx context.Context, in *GetTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error)
	GetTranscriptChangeDiff(ctx context.Context, in *GetTranscriptChangeDiffRequest, opts ...grpc.CallOption) (*TranscriptChangeDiff, error)
	CreateTranscriptChange(ctx context.Context, in *CreateTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error)
	UpdateTranscriptChange(ctx context.Context, in *UpdateTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error)
	DeleteTranscriptChange(ctx context.Context, in *DeleteTranscriptChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestTranscriptChangeState(ctx context.Context, in *RequestTranscriptChangeStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAuthorContributions(ctx context.Context, in *ListAuthorContributionsRequest, opts ...grpc.CallOption) (*AuthorContributionList, error)
	ListAuthorRanks(ctx context.Context, in *ListAuthorRanksRequest, opts ...grpc.CallOption) (*AuthorRankList, error)
	ListIncomingDonations(ctx context.Context, in *ListIncomingDonationsRequest, opts ...grpc.CallOption) (*IncomingDonationList, error)
}

type contribServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContribServiceClient(cc grpc.ClientConnInterface) ContribServiceClient {
	return &contribServiceClient{cc}
}

func (c *contribServiceClient) ListTscripts(ctx context.Context, in *ListTscriptsRequest, opts ...grpc.CallOption) (*TscriptList, error) {
	out := new(TscriptList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListTscripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) GetChunkStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChunkStats, error) {
	out := new(ChunkStats)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/GetChunkStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) GetAuthorLeaderboard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthorLeaderboard, error) {
	out := new(AuthorLeaderboard)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/GetAuthorLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/GetChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ListChunks(ctx context.Context, in *ListChunksRequest, opts ...grpc.CallOption) (*ChunkList, error) {
	out := new(ChunkList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ListChunkContributions(ctx context.Context, in *ListChunkContributionsRequest, opts ...grpc.CallOption) (*ChunkContributionList, error) {
	out := new(ChunkContributionList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListChunkContributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) GetChunkContribution(ctx context.Context, in *GetChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/GetChunkContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) CreateChunkContribution(ctx context.Context, in *CreateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/CreateChunkContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) UpdateChunkContribution(ctx context.Context, in *UpdateChunkContributionRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/UpdateChunkContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) DeleteChunkContribution(ctx context.Context, in *DeleteChunkContributionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/DeleteChunkContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) RequesChunktContributionState(ctx context.Context, in *RequestChunkContributionStateRequest, opts ...grpc.CallOption) (*ChunkContribution, error) {
	out := new(ChunkContribution)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/RequesChunktContributionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ListPendingRewards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PendingRewardList, error) {
	out := new(PendingRewardList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListPendingRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ListClaimedRewards(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClaimedRewardList, error) {
	out := new(ClaimedRewardList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListClaimedRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ClaimReward(ctx context.Context, in *ClaimRewardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ClaimReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ListDonationRecipients(ctx context.Context, in *ListDonationRecipientsRequest, opts ...grpc.CallOption) (*DonationRecipientList, error) {
	out := new(DonationRecipientList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListDonationRecipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) GetDonationStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DonationStats, error) {
	out := new(DonationStats)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/GetDonationStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ListTranscriptChanges(ctx context.Context, in *ListTranscriptChangesRequest, opts ...grpc.CallOption) (*TranscriptChangeList, error) {
	out := new(TranscriptChangeList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListTranscriptChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) GetTranscriptChange(ctx context.Context, in *GetTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error) {
	out := new(TranscriptChange)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/GetTranscriptChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) GetTranscriptChangeDiff(ctx context.Context, in *GetTranscriptChangeDiffRequest, opts ...grpc.CallOption) (*TranscriptChangeDiff, error) {
	out := new(TranscriptChangeDiff)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/GetTranscriptChangeDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) CreateTranscriptChange(ctx context.Context, in *CreateTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error) {
	out := new(TranscriptChange)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/CreateTranscriptChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) UpdateTranscriptChange(ctx context.Context, in *UpdateTranscriptChangeRequest, opts ...grpc.CallOption) (*TranscriptChange, error) {
	out := new(TranscriptChange)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/UpdateTranscriptChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) DeleteTranscriptChange(ctx context.Context, in *DeleteTranscriptChangeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/DeleteTranscriptChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) RequestTranscriptChangeState(ctx context.Context, in *RequestTranscriptChangeStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/RequestTranscriptChangeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ListAuthorContributions(ctx context.Context, in *ListAuthorContributionsRequest, opts ...grpc.CallOption) (*AuthorContributionList, error) {
	out := new(AuthorContributionList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListAuthorContributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ListAuthorRanks(ctx context.Context, in *ListAuthorRanksRequest, opts ...grpc.CallOption) (*AuthorRankList, error) {
	out := new(AuthorRankList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListAuthorRanks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contribServiceClient) ListIncomingDonations(ctx context.Context, in *ListIncomingDonationsRequest, opts ...grpc.CallOption) (*IncomingDonationList, error) {
	out := new(IncomingDonationList)
	err := c.cc.Invoke(ctx, "/rsk.ContribService/ListIncomingDonations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContribServiceServer is the server API for ContribService service.
// All implementations should embed UnimplementedContribServiceServer
// for forward compatibility
type ContribServiceServer interface {
	ListTscripts(context.Context, *ListTscriptsRequest) (*TscriptList, error)
	// chunks are ~3 min sections of the transcription
	GetChunkStats(context.Context, *emptypb.Empty) (*ChunkStats, error)
	GetAuthorLeaderboard(context.Context, *emptypb.Empty) (*AuthorLeaderboard, error)
	GetChunk(context.Context, *GetChunkRequest) (*Chunk, error)
	ListChunks(context.Context, *ListChunksRequest) (*ChunkList, error)
	ListChunkContributions(context.Context, *ListChunkContributionsRequest) (*ChunkContributionList, error)
	GetChunkContribution(context.Context, *GetChunkContributionRequest) (*ChunkContribution, error)
	CreateChunkContribution(context.Context, *CreateChunkContributionRequest) (*ChunkContribution, error)
	UpdateChunkContribution(context.Context, *UpdateChunkContributionRequest) (*ChunkContribution, error)
	DeleteChunkContribution(context.Context, *DeleteChunkContributionRequest) (*emptypb.Empty, error)
	RequesChunktContributionState(context.Context, *RequestChunkContributionStateRequest) (*ChunkContribution, error)
	ListPendingRewards(context.Context, *emptypb.Empty) (*PendingRewardList, error)
	ListClaimedRewards(context.Context, *emptypb.Empty) (*ClaimedRewardList, error)
	ClaimReward(context.Context, *ClaimRewardRequest) (*emptypb.Empty, error)
	ListDonationRecipients(context.Context, *ListDonationRecipientsRequest) (*DonationRecipientList, error)
	GetDonationStats(context.Context, *emptypb.Empty) (*DonationStats, error)
	ListTranscriptChanges(context.Context, *ListTranscriptChangesRequest) (*TranscriptChangeList, error)
	GetTranscriptChange(context.Context, *GetTranscriptChangeRequest) (*TranscriptChange, error)
	GetTranscriptChangeDiff(context.Context, *GetTranscriptChangeDiffRequest) (*TranscriptChangeDiff, error)
	CreateTranscriptChange(context.Context, *CreateTranscriptChangeRequest) (*TranscriptChange, error)
	UpdateTranscriptChange(context.Context, *UpdateTranscriptChangeRequest) (*TranscriptChange, error)
	DeleteTranscriptChange(context.Context, *DeleteTranscriptChangeRequest) (*emptypb.Empty, error)
	RequestTranscriptChangeState(context.Context, *RequestTranscriptChangeStateRequest) (*emptypb.Empty, error)
	ListAuthorContributions(context.Context, *ListAuthorContributionsRequest) (*AuthorContributionList, error)
	ListAuthorRanks(context.Context, *ListAuthorRanksRequest) (*AuthorRankList, error)
	ListIncomingDonations(context.Context, *ListIncomingDonationsRequest) (*IncomingDonationList, error)
}

// UnimplementedContribServiceServer should be embedded to have forward compatible implementations.
type UnimplementedContribServiceServer struct {
}

func (UnimplementedContribServiceServer) ListTscripts(context.Context, *ListTscriptsRequest) (*TscriptList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTscripts not implemented")
}
func (UnimplementedContribServiceServer) GetChunkStats(context.Context, *emptypb.Empty) (*ChunkStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkStats not implemented")
}
func (UnimplementedContribServiceServer) GetAuthorLeaderboard(context.Context, *emptypb.Empty) (*AuthorLeaderboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorLeaderboard not implemented")
}
func (UnimplementedContribServiceServer) GetChunk(context.Context, *GetChunkRequest) (*Chunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedContribServiceServer) ListChunks(context.Context, *ListChunksRequest) (*ChunkList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChunks not implemented")
}
func (UnimplementedContribServiceServer) ListChunkContributions(context.Context, *ListChunkContributionsRequest) (*ChunkContributionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChunkContributions not implemented")
}
func (UnimplementedContribServiceServer) GetChunkContribution(context.Context, *GetChunkContributionRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunkContribution not implemented")
}
func (UnimplementedContribServiceServer) CreateChunkContribution(context.Context, *CreateChunkContributionRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChunkContribution not implemented")
}
func (UnimplementedContribServiceServer) UpdateChunkContribution(context.Context, *UpdateChunkContributionRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChunkContribution not implemented")
}
func (UnimplementedContribServiceServer) DeleteChunkContribution(context.Context, *DeleteChunkContributionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChunkContribution not implemented")
}
func (UnimplementedContribServiceServer) RequesChunktContributionState(context.Context, *RequestChunkContributionStateRequest) (*ChunkContribution, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequesChunktContributionState not implemented")
}
func (UnimplementedContribServiceServer) ListPendingRewards(context.Context, *emptypb.Empty) (*PendingRewardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingRewards not implemented")
}
func (UnimplementedContribServiceServer) ListClaimedRewards(context.Context, *emptypb.Empty) (*ClaimedRewardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClaimedRewards not implemented")
}
func (UnimplementedContribServiceServer) ClaimReward(context.Context, *ClaimRewardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimReward not implemented")
}
func (UnimplementedContribServiceServer) ListDonationRecipients(context.Context, *ListDonationRecipientsRequest) (*DonationRecipientList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDonationRecipients not implemented")
}
func (UnimplementedContribServiceServer) GetDonationStats(context.Context, *emptypb.Empty) (*DonationStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonationStats not implemented")
}
func (UnimplementedContribServiceServer) ListTranscriptChanges(context.Context, *ListTranscriptChangesRequest) (*TranscriptChangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranscriptChanges not implemented")
}
func (UnimplementedContribServiceServer) GetTranscriptChange(context.Context, *GetTranscriptChangeRequest) (*TranscriptChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptChange not implemented")
}
func (UnimplementedContribServiceServer) GetTranscriptChangeDiff(context.Context, *GetTranscriptChangeDiffRequest) (*TranscriptChangeDiff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptChangeDiff not implemented")
}
func (UnimplementedContribServiceServer) CreateTranscriptChange(context.Context, *CreateTranscriptChangeRequest) (*TranscriptChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTranscriptChange not implemented")
}
func (UnimplementedContribServiceServer) UpdateTranscriptChange(context.Context, *UpdateTranscriptChangeRequest) (*TranscriptChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTranscriptChange not implemented")
}
func (UnimplementedContribServiceServer) DeleteTranscriptChange(context.Context, *DeleteTranscriptChangeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTranscriptChange not implemented")
}
func (UnimplementedContribServiceServer) RequestTranscriptChangeState(context.Context, *RequestTranscriptChangeStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTranscriptChangeState not implemented")
}
func (UnimplementedContribServiceServer) ListAuthorContributions(context.Context, *ListAuthorContributionsRequest) (*AuthorContributionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorContributions not implemented")
}
func (UnimplementedContribServiceServer) ListAuthorRanks(context.Context, *ListAuthorRanksRequest) (*AuthorRankList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorRanks not implemented")
}
func (UnimplementedContribServiceServer) ListIncomingDonations(context.Context, *ListIncomingDonationsRequest) (*IncomingDonationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingDonations not implemented")
}

// UnsafeContribServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContribServiceServer will
// result in compilation errors.
type UnsafeContribServiceServer interface {
	mustEmbedUnimplementedContribServiceServer()
}

func RegisterContribServiceServer(s grpc.ServiceRegistrar, srv ContribServiceServer) {
	s.RegisterService(&ContribService_ServiceDesc, srv)
}

func _ContribService_ListTscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListTscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListTscripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListTscripts(ctx, req.(*ListTscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_GetChunkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).GetChunkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/GetChunkStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).GetChunkStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_GetAuthorLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).GetAuthorLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/GetAuthorLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).GetAuthorLeaderboard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/GetChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).GetChunk(ctx, req.(*GetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ListChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListChunks(ctx, req.(*ListChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ListChunkContributions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChunkContributionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListChunkContributions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListChunkContributions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListChunkContributions(ctx, req.(*ListChunkContributionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_GetChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).GetChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/GetChunkContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).GetChunkContribution(ctx, req.(*GetChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_CreateChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).CreateChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/CreateChunkContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).CreateChunkContribution(ctx, req.(*CreateChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_UpdateChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).UpdateChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/UpdateChunkContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).UpdateChunkContribution(ctx, req.(*UpdateChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_DeleteChunkContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChunkContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).DeleteChunkContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/DeleteChunkContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).DeleteChunkContribution(ctx, req.(*DeleteChunkContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_RequesChunktContributionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChunkContributionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).RequesChunktContributionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/RequesChunktContributionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).RequesChunktContributionState(ctx, req.(*RequestChunkContributionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ListPendingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListPendingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListPendingRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListPendingRewards(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ListClaimedRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListClaimedRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListClaimedRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListClaimedRewards(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ClaimReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ClaimReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ClaimReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ClaimReward(ctx, req.(*ClaimRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ListDonationRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDonationRecipientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListDonationRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListDonationRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListDonationRecipients(ctx, req.(*ListDonationRecipientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_GetDonationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).GetDonationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/GetDonationStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).GetDonationStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ListTranscriptChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranscriptChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListTranscriptChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListTranscriptChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListTranscriptChanges(ctx, req.(*ListTranscriptChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_GetTranscriptChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).GetTranscriptChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/GetTranscriptChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).GetTranscriptChange(ctx, req.(*GetTranscriptChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_GetTranscriptChangeDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptChangeDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).GetTranscriptChangeDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/GetTranscriptChangeDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).GetTranscriptChangeDiff(ctx, req.(*GetTranscriptChangeDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_CreateTranscriptChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTranscriptChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).CreateTranscriptChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/CreateTranscriptChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).CreateTranscriptChange(ctx, req.(*CreateTranscriptChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_UpdateTranscriptChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTranscriptChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).UpdateTranscriptChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/UpdateTranscriptChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).UpdateTranscriptChange(ctx, req.(*UpdateTranscriptChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_DeleteTranscriptChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTranscriptChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).DeleteTranscriptChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/DeleteTranscriptChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).DeleteTranscriptChange(ctx, req.(*DeleteTranscriptChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_RequestTranscriptChangeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTranscriptChangeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).RequestTranscriptChangeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/RequestTranscriptChangeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).RequestTranscriptChangeState(ctx, req.(*RequestTranscriptChangeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ListAuthorContributions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorContributionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListAuthorContributions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListAuthorContributions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListAuthorContributions(ctx, req.(*ListAuthorContributionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ListAuthorRanks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorRanksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListAuthorRanks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListAuthorRanks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListAuthorRanks(ctx, req.(*ListAuthorRanksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContribService_ListIncomingDonations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomingDonationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContribServiceServer).ListIncomingDonations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rsk.ContribService/ListIncomingDonations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContribServiceServer).ListIncomingDonations(ctx, req.(*ListIncomingDonationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContribService_ServiceDesc is the grpc.ServiceDesc for ContribService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContribService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rsk.ContribService",
	HandlerType: (*ContribServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTscripts",
			Handler:    _ContribService_ListTscripts_Handler,
		},
		{
			MethodName: "GetChunkStats",
			Handler:    _ContribService_GetChunkStats_Handler,
		},
		{
			MethodName: "GetAuthorLeaderboard",
			Handler:    _ContribService_GetAuthorLeaderboard_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _ContribService_GetChunk_Handler,
		},
		{
			MethodName: "ListChunks",
			Handler:    _ContribService_ListChunks_Handler,
		},
		{
			MethodName: "ListChunkContributions",
			Handler:    _ContribService_ListChunkContributions_Handler,
		},
		{
			MethodName: "GetChunkContribution",
			Handler:    _ContribService_GetChunkContribution_Handler,
		},
		{
			MethodName: "CreateChunkContribution",
			Handler:    _ContribService_CreateChunkContribution_Handler,
		},
		{
			MethodName: "UpdateChunkContribution",
			Handler:    _ContribService_UpdateChunkContribution_Handler,
		},
		{
			MethodName: "DeleteChunkContribution",
			Handler:    _ContribService_DeleteChunkContribution_Handler,
		},
		{
			MethodName: "RequesChunktContributionState",
			Handler:    _ContribService_RequesChunktContributionState_Handler,
		},
		{
			MethodName: "ListPendingRewards",
			Handler:    _ContribService_ListPendingRewards_Handler,
		},
		{
			MethodName: "ListClaimedRewards",
			Handler:    _ContribService_ListClaimedRewards_Handler,
		},
		{
			MethodName: "ClaimReward",
			Handler:    _ContribService_ClaimReward_Handler,
		},
		{
			MethodName: "ListDonationRecipients",
			Handler:    _ContribService_ListDonationRecipients_Handler,
		},
		{
			MethodName: "GetDonationStats",
			Handler:    _ContribService_GetDonationStats_Handler,
		},
		{
			MethodName: "ListTranscriptChanges",
			Handler:    _ContribService_ListTranscriptChanges_Handler,
		},
		{
			MethodName: "GetTranscriptChange",
			Handler:    _ContribService_GetTranscriptChange_Handler,
		},
		{
			MethodName: "GetTranscriptChangeDiff",
			Handler:    _ContribService_GetTranscriptChangeDiff_Handler,
		},
		{
			MethodName: "CreateTranscriptChange",
			Handler:    _ContribService_CreateTranscriptChange_Handler,
		},
		{
			MethodName: "UpdateTranscriptChange",
			Handler:    _ContribService_UpdateTranscriptChange_Handler,
		},
		{
			MethodName: "DeleteTranscriptChange",
			Handler:    _ContribService_DeleteTranscriptChange_Handler,
		},
		{
			MethodName: "RequestTranscriptChangeState",
			Handler:    _ContribService_RequestTranscriptChangeState_Handler,
		},
		{
			MethodName: "ListAuthorContributions",
			Handler:    _ContribService_ListAuthorContributions_Handler,
		},
		{
			MethodName: "ListAuthorRanks",
			Handler:    _ContribService_ListAuthorRanks_Handler,
		},
		{
			MethodName: "ListIncomingDonations",
			Handler:    _ContribService_ListIncomingDonations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contrib.proto",
}
